{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { ADD_CONTACT, CONTACT_ERROR, GET_CONTACTS, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from './types';\nexport const addContact = contact => async dispatch => {\n  try {\n    const res = await axios.post('api/contacts', contact);\n    dispatch({\n      type: ADD_CONTACT,\n      payload: res.data\n    });\n    dispatch(setAlert('Contact Added', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CONTACT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const getContacts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/contacts');\n    dispatch({\n      type: GET_CONTACTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: CONTACT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const setCurrent = contact => dispatch => {\n  dispatch({\n    type: SET_CURRENT,\n    payload: contact\n  });\n};\nexport const clearCurrent = () => dispatch => {\n  dispatch({\n    type: CLEAR_CURRENT\n  });\n};\nexport const updateContact = contact => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(\"/api/contacts/\".concat(contact._id), contact);\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: res.data\n    });\n    dispatch(setAlert('Contact Updated', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: CONTACT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const deleteContact = _id => async dispatch => {\n  if (window.confirm('Are you sure to delete? This cannot be undone.!')) {\n    try {\n      await axios.delete(\"/api/contacts/\".concat(_id));\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: _id\n      });\n      dispatch(setAlert('Contact Deleted', 'success'));\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};\nexport const filterContact = text => dispatch => {\n  dispatch({\n    type: FILTER_CONTACTS,\n    payload: text\n  });\n};\nexport const clearFilter = () => dispatch => {\n  dispatch({\n    type: CLEAR_FILTER\n  });\n};","map":{"version":3,"sources":["/home/mukeshs/MERN/chat-app-master/contact-keeper/contact-keeper_redux/client/src/actions/contact.js"],"names":["axios","setAlert","ADD_CONTACT","CONTACT_ERROR","GET_CONTACTS","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","addContact","contact","dispatch","res","post","type","payload","data","err","errors","response","forEach","error","msg","statusText","status","getContacts","get","setCurrent","clearCurrent","updateContact","config","headers","put","_id","deleteContact","window","confirm","delete","filterContact","text","clearFilter"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,WADF,EACeC,aADf,EAC8BC,YAD9B,EAC4CC,WAD5C,EACyDC,aADzD,EACwEC,cADxE,EAEEC,cAFF,EAEkBC,eAFlB,EAEmCC,YAFnC,QAGO,SAHP;AAMA,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAI,MAAMC,QAAN,IAAkB;AACrD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2BH,OAA3B,CAAlB;AACAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,WAAR;AAAqBe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAlC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAEZ,QAAQ,CAAC,eAAD,EAAkB,SAAlB,CAAV,CAAR;AAED,GALD,CAMA,OAAOkB,GAAP,EAAY;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIV,QAAQ,CAACZ,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AACDX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,aAAR;AAAuBc,MAAAA,OAAO,EAAE;AAAEO,QAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,QAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAAhC,KAAD,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMd,QAAN,IAAkB;AACjD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMd,KAAK,CAAC4B,GAAN,CAAU,eAAV,CAAlB;AACAf,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEZ,YAAR;AAAsBa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAnC,KAAD,CAAR;AACD,GAHD,CAIA,OAAOC,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,aAAR;AAAuBc,MAAAA,OAAO,EAAE;AAAEO,QAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,QAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAAhC,KAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMG,UAAU,GAAGjB,OAAO,IAAIC,QAAQ,IAAI;AAC/CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEX,WAAR;AAAqBY,IAAAA,OAAO,EAAEL;AAA9B,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMkB,YAAY,GAAG,MAAMjB,QAAQ,IAAI;AAC5CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMyB,aAAa,GAAGnB,OAAO,IAAI,MAAMC,QAAN,IAAkB;AACxD,QAAMmB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AACF,UAAMnB,GAAG,GAAG,MAAMd,KAAK,CAACkC,GAAN,yBAA2BtB,OAAO,CAACuB,GAAnC,GAA0CvB,OAA1C,CAAlB;AACAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET,cAAR;AAAwBU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAArC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAEZ,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAAV,CAAR;AACD,GAJD,CAKA,OAAOkB,GAAP,EAAY;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIV,QAAQ,CAACZ,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,aAAR;AAAuBc,MAAAA,OAAO,EAAE;AAAEO,QAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,QAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAAhC,KAAD,CAAR;AACD;AACF,CApBM;AAuBP,OAAO,MAAMU,aAAa,GAAGD,GAAG,IAAI,MAAMtB,QAAN,IAAkB;AACpD,MAAIwB,MAAM,CAACC,OAAP,CAAe,iDAAf,CAAJ,EAAuE;AACrE,QAAI;AACF,YAAMtC,KAAK,CAACuC,MAAN,yBAA8BJ,GAA9B,EAAN;AACAtB,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAER,cAAR;AAAwBS,QAAAA,OAAO,EAAEkB;AAAjC,OAAD,CAAR;AACAtB,MAAAA,QAAQ,CAAEZ,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAAV,CAAR;AACD,KAJD,CAKA,OAAOkB,GAAP,EAAY;AAEVN,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEb,aAAR;AAAuBc,QAAAA,OAAO,EAAE;AAAEO,UAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,UAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAAhC,OAAD,CAAR;AACD;AACF;AACF,CAZM;AAcP,OAAO,MAAMc,aAAa,GAAGC,IAAI,IAAI5B,QAAQ,IAAI;AAC/CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP,eAAR;AAAyBQ,IAAAA,OAAO,EAAEwB;AAAlC,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,WAAW,GAAG,MAAM7B,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import axios from 'axios'\nimport { setAlert } from './alert'\nimport {\n  ADD_CONTACT, CONTACT_ERROR, GET_CONTACTS, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT,\n  DELETE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER\n} from './types'\n\n\nexport const addContact = contact => async dispatch => {\n  try {\n    const res = await axios.post('api/contacts', contact);\n    dispatch({ type: ADD_CONTACT, payload: res.data });\n    dispatch((setAlert('Contact Added', 'success')));\n\n  }\n  catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({ type: CONTACT_ERROR, payload: { msg: err.response.statusText, status: err.response.status } });\n  }\n}\n\nexport const getContacts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/contacts');\n    dispatch({ type: GET_CONTACTS, payload: res.data });\n  }\n  catch (err) {\n    dispatch({ type: CONTACT_ERROR, payload: { msg: err.response.statusText, status: err.response.status } });\n  }\n}\n\nexport const setCurrent = contact => dispatch => {\n  dispatch({ type: SET_CURRENT, payload: contact })\n}\n\nexport const clearCurrent = () => dispatch => {\n  dispatch({ type: CLEAR_CURRENT })\n}\n\nexport const updateContact = contact => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  try {\n    const res = await axios.put(`/api/contacts/${contact._id}`, contact);\n    dispatch({ type: UPDATE_CONTACT, payload: res.data });\n    dispatch((setAlert('Contact Updated', 'success')));\n  }\n  catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({ type: CONTACT_ERROR, payload: { msg: err.response.statusText, status: err.response.status } });\n  }\n}\n\n\nexport const deleteContact = _id => async dispatch => {\n  if (window.confirm('Are you sure to delete? This cannot be undone.!')) {\n    try {\n      await axios.delete(`/api/contacts/${_id}`);\n      dispatch({ type: DELETE_CONTACT, payload: _id });\n      dispatch((setAlert('Contact Deleted', 'success')));\n    }\n    catch (err) {\n\n      dispatch({ type: CONTACT_ERROR, payload: { msg: err.response.statusText, status: err.response.status } });\n    }\n  }\n}\n\nexport const filterContact = text => dispatch => {\n  dispatch({ type: FILTER_CONTACTS, payload: text });\n}\n\nexport const clearFilter = () => dispatch => {\n  dispatch({ type: CLEAR_FILTER })\n}\n"]},"metadata":{},"sourceType":"module"}